1.下载Buster镜像:
   https://downloads.raspberrypi.org/raspbian/images/raspbian-2019-09-30/2019-09-26-raspbian-buster.zip
2.格式化SDCard
  打开应用:SD Card Fomater 
3.balenaEtcher
   选择映像文件安装
4.配置wifi
 在boot文件夹下面创建一个文件 /boot/wpa_supplicant.conf
   内容如下

country=CN
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
 
network={
ssid="你的WIFi的名字"
psk="你的WIFI的密码"
key_mgmt=WPA-PSK
priority=1
}

5.开启ssh
只需要在boot下(SD卡根目录)载创建一个ssh文件即可(只是单纯的文件,用于标识启动ssh); 系统启动后会自动开启ssh服务

6.更换国内源
6.1 sudo nano /etc/apt/sources.list

#deb http://raspbian.raspberrypi.org/raspbian/ buster main contrib non-free rpi
# Uncomment line below then 'apt-get update' to enable 'apt-get source'
#deb-src http://raspbian.raspberrypi.org/raspbian/ buster main contrib non-free rpi
deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi
deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi

6.2 sudo nano /etc/apt/sources.list.d/raspi.list

#deb https://mirrors.ustc.edu.cn/archive.raspberrypi.org/ buster main ui
# Uncomment line below then 'apt-get update' to enable 'apt-get source'
#deb http://archive.respberrypi.org/debian/ buster main ui
#deb-src http://archive.raspberrypi.org/debian/ buster main ui
deb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui
deb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui

6.3 sudo apt-get update

（0可选）
 扩展文件系统
 sudo raspi-config -> 7 Advanced Options -> A1 Expand filesystem -> sudo reboot
 
 
  >>>>>>>>>>>>>>>>>>>>>安装opencv<<<<<<<<<<<<<<<<<<<<
7 .安装opencv
   7.1.Make sure that the Raspberry Pi is updated.
   sudo apt-get update
   sudo apt-get upgrade
   sudo rpi-update
   sudo reboot
   
   7.2 (卸载不要应用)deleting both Wolfram Engine and LibreOffice to reclaim ~1GB of space on your Raspberry Pi
  
   $ sudo apt-get purge wolfram-engine
   $ sudo apt-get purge libreoffice*
   $ sudo apt-get clean
   $ sudo apt-get autoremove
   
   7.3 安装依赖
   
   sudo apt-get update && sudo apt-get upgrade
   
   sudo apt-get install build-essential cmake pkg-config -y
   
   sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng-dev -y
   
   sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev -y
   sudo apt-get install libxvidcore-dev libx264-dev -y
   
   sudo apt-get install libfontconfig1-dev libcairo2-dev -y
   sudo apt-get install libgdk-pixbuf2.0-dev libpango1.0-dev -y
   sudo apt-get install libgtk2.0-dev libgtk-3-dev -y
   
   sudo apt-get install libatlas-base-dev gfortran -y

   
   sudo apt-get install libhdf5-dev libhdf5-serial-dev libhdf5-103 -y
   sudo apt-get install libqtgui4 libqtwebkit4 libqt4-test python3-pyqt5 -y 
   
   sudo apt-get install python3-dev -y
   
    7.4 获取opencv opencv_contrib 源文件
     wget -O opencv.zip https://github.com/opencv/opencv/archive/4.1.1.zip
     wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.1.1.zip
     mkdir opencv_build
    mv opencv-4.1.1 opencv_build/opencv 
    mv opencv_contrib-4.1.1 opencv_build/opencv_contrib
   
   7.5 Increasing your SWAP space
   
   sudo nano /etc/dphys-swapfile
   CONF_SWAPSIZE=2048
   
   sudo /etc/init.d/dphys-swapfile stop
   sudo /etc/init.d/dphys-swapfile start
   
   8.Compile and install OpenCV 4 on Raspbian Buster
   
   8.1
   pip3 install numpy  
   
   8.2 build opencv
   cd ~/opencv_build/opencv 
   mkdir build
   cd build
   cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
    -D ENABLE_NEON=ON \
    -D ENABLE_VFPV3=ON \
    -D BUILD_TESTS=OFF \
    -D INSTALL_PYTHON_EXAMPLES=OFF \
    -D OPENCV_ENABLE_NONFREE=ON \
    -D CMAKE_SHARED_LINKER_FLAGS=-latomic \
    -D BUILD_EXAMPLES=OFF ..
   8.3 make
   8.4 sudo make install
   8.5 sudo ldconfig
   
 (9 可选).Reset your SWAP
    nano /etc/dphys-swapfile
    CONF_SWAPSIZE = 100MB
    sudo /etc/init.d/dphys-swapfile stop
    sudo /etc/init.d/dphys-swapfile start
    
  10. Testing your OpenCV 4 Raspberry Pi BusterOS install  
    
  $ cd ~
  $ workon cv
  $ python
  >>> import cv2
  >>> cv2.__version__
  '4.1.1'
  >>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>安装tensoflow<<<<<<<<<<<<<<<<<<<<<<<<<<
Python 3.x + Tensorflow v2 series
具体请查看:
https://github.com/wjl198435/Tensorflow-raspberry-buster-ok

1. 安装 tensorflow
$ sudo apt-get install -y libhdf5-dev libc-ares-dev libeigen3-dev
$ sudo pip3 install keras_applications==1.0.7 --no-deps
$ sudo pip3 install keras_preprocessing==1.0.9 --no-deps
$ sudo pip3 install h5py==2.9.0
$ sudo apt-get install -y openmpi-bin libopenmpi-dev
$ sudo apt-get install -y libatlas-base-dev
$ pip3 install -U --user six wheel mock
$ sudo apt update;sudo apt upgrade
$ wget https://github.com/PINTO0309/Tensorflow-bin/raw/master/tensorflow-2.0.0b1-cp35-cp35m-linux_armv7l.whl
$ sudo pip3 uninstall tensorflow
$ sudo -H pip3 install tensorflow-2.0.0b1-cp35-cp35m-linux_armv7l.whl

【Required】 Restart the terminal.


2.Operation check

Example of Python 3.x series

$ python3
>>> import tensorflow
>>> tensorflow.__version__
1.14.0
>>> exit()

3.Sample of MultiThread x4

Preparation of test environment
$ cd ~;mkdir test
$ curl https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/lite/examples/label_image/testdata/grace_hopper.bmp > ~/test/grace_hopper.bmp
$ curl https://storage.googleapis.com/download.tensorflow.org/models/mobilenet_v1_1.0_224_frozen.tgz | tar xzv -C ~/test mobilenet_v1_1.0_224/labels.txt
$ mv ~/test/mobilenet_v1_1.0_224/labels.txt ~/test/
$ curl http://download.tensorflow.org/models/mobilenet_v1_2018_02_22/mobilenet_v1_1.0_224_quant.tgz | tar xzv -C ~/test
$ cp tensorflow/tensorflow/contrib/lite/examples/python/label_image.py ~/test




ERROR:

>>> import tensorflow

1. ImportError: /lib/arm-linux-gnueabihf/libm.so.6: version `GLIBC_2.29' not found

wget https://mirror.us-midwest-1.nexcess.net/gnu/libc/glibc-2.29.tar.xz

xz -d glibc-2.30.tar.xz
tar -xf glibc-2.30.tar
mkdir build
cd build
../configure  --prefix=$HOME/local
(报错 missing or too old)：sudo apt-get install gawk bsion
make
make install
 
最后 
export LD_LIBRARY_PATH=$HOME/local/lib:$LD_LIBRARY_PATH 

nano /etc/profile
export LD_LIBRARY_PATH=$HOME/local/lib:$LD_LIBRARY_PATH 



>>>>>>>>>>>>>>>>>>>>>raspberry ffmepg<<<<<<<<<<<<<<<<
包安装
1.sudo apt-get ffmepg

源码安装:
参考链接:https://holmesian.org/Raspberry-Pi-optimized-FFmpeg-with-HW-Acceleration
1.准备配置
/boot/config.txt

gpu_mem=256
framebuffer_depth=16

2.准备 FFmpeg
  apt-get install autoconf automake build-essential libass-dev libfreetype6-dev  libtheora-dev libtool libvorbis-dev pkg-config texinfo zlib1g-dev unzip cmake yasm libx264-dev libmp3lame-dev libopus-dev libbz2-dev

3. 编译安装 x264
    git clone https://github.com/mirror/x264.git
    cd x264/
    # git checkout 72d53ab2ac7af24597a824e868f2ef363a22f5d4
    ./configure --disable-asm --enable-shared --disable-win32thread --enable-strip --extra-cflags='-march=armv7-a -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard'
    make -j 4 V=1
    make install
    ldconfig
    
 4.编译安装 libmpeg2
 
    wget http://libmpeg2.sourceforge.net/files/libmpeg2-0.5.1.tar.gz
    tar -xvzpf libmpeg2-0.5.1.tar.gz
    cd libmpeg2-0.5.1
    ./configure --disable-largefile
    
    make -j 4 V=1
    make install
    ldconfig
 5. 编译安装 libass
    wget https://github.com/libass/libass/releases/download/0.13.7/libass-0.13.7.tar.gz
    tar -xvzpf libass-0.13.7.tar.gz
    cd libass-0.13.7/
    ./configure
    make -j 4 V=1
    make install
    ldconfig
    
  6.编译安装 FFmpeg
    wget https://github.com/xbmc/FFmpeg/archive/4.0.4-Leia-18.4.tar.gz
    tar -xzpf FFmpeg-4.0.4-Leia-18.4.tar.gz
    cd FFmpeg-4.0.4-Leia-18.4
    export LDFLAGS="-L /opt/vc/lib/"
    
    ./configure --extra-ldflags="-L /opt/vc/lib/" --extra-cflags='-march=armv7-a -mtune=cortex-a7 -mfpu=neon-vfpv4 -mvectorize-with-neon-quad -mfloat-abi=hard' --extra-cxxflags='-march=armv7-a -mtune=cortex-a7 -mfpu=neon-vfpv4 -mvectorize-with-neon-quad -mfloat-abi=hard' --disable-devices --disable-ffprobe --disable-doc --disable-w32threads --enable-ffplay --extra-libs=-ldl --enable-shared --enable-libass --disable-devices --enable-mmal --enable-decoder=h264_mmal --enable-decoder=mpeg2_mmal --enable-encoder=h264_omx --enable-omx --enable-omx-rpi --enable-neon --enable-gnutls --enable-libvorbis --enable-muxer=ogg --enable-encoder=libvorbis --enable-nonfree --enable-libx264 --enable-gpl --enable-runtime-cpudetect --enable-postproc --enable-bzlib --enable-muxer=spdif --enable-muxer=adts --enable-muxer=asf --enable-encoder=ac3 --enable-encoder=aac --enable-encoder=wmav2 --enable-protocol=http --enable-encoder=png --enable-encoder=mjpeg  --enable-pthreads --enable-pic --enable-zlib --disable-mipsdsp --disable-mipsdspr2
    
    make -j 3 V=1
    make install 
    ldconfig
 7 树莓派3代以上：
 ./configure --extra-ldflags="-L /opt/vc/lib/" --extra-cflags='-march=armv8-a+crc -mtune=cortex-a53 -mfpu=neon-fp-armv8 -mvectorize-with-neon-quad -mfloat-abi=hard' --extra-cxxflags='-march=armv8-a+crc -mtune=cortex-a53 -mfpu=neon-fp-armv8 -mvectorize-with-neon-quad -mfloat-abi=hard' --disable-devices --disable-ffprobe --disable-doc --disable-w32threads --enable-ffplay --extra-libs=-ldl --enable-shared --enable-libass --disable-devices --enable-mmal --enable-decoder=h264_mmal --enable-decoder=mpeg2_mmal --enable-encoder=h264_omx --enable-omx --enable-omx-rpi --enable-neon --enable-gnutls --extra-libs='-lnettle -lhogweed -lgmp' --enable-libvorbis --enable-muxer=ogg --enable-encoder=libvorbis --enable-nonfree --enable-libx264 --enable-gpl --enable-runtime-cpudetect --enable-postproc --enable-bzlib --enable-muxer=spdif --enable-muxer=adts --enable-muxer=asf --enable-encoder=ac3 --enable-encoder=aac --enable-encoder=wmav2 --enable-protocol=http --enable-encoder=png --enable-encoder=mjpeg  --enable-pthreads --enable-pic --enable-zlib --disable-mipsdsp --disable-mipsdspr2   

 error: gnutls not found using pkg-cofig
  
  
方案二: 脚本自动化安装:
使用 aptitude 安装包解决包依赖问题
sudo apt-get install aptitude

 update-ffmpeg-rpi.sh
 、、、
 #!/bin/bash
# Compile and install/update (or install via Apt) FFmpeg Codecs
# Compile and install/update FFmpeg suite
# Compile with hardware acceleration
# Modified from https://retroresolution.com/compiling-ffmpeg-from-source-code-all-in-one-script/

echo "Begining Installation of FFmpeg Suite"

#Update APT Repository
echo "Updating the APT repository information"
sudo apt-get update

#Create Working Directories
echo "Setting up working directories to be used during the installation and build process"
cd ~
rm -rf ~/ffmpeg_build ~/ffmpeg_sources ~/bin/{ffmpeg,ffprobe,ffplay,ffserver,x264,x265}
mkdir -p ~/ffmpeg_sources
mkdir -p ~/ffmpeg_build

#Build Tools
echo "Installing various tools and packages, including audio-video codecs, required for building FFmpeg"
sudo aptitude -y install \
  autoconf \
  automake \
  build-essential \
  git \
  pkg-config \
  texinfo \
  wget \
  yasm \
  libavdevice-dev \
  frei0r-plugins-dev \
  ladspa-sdk \
  libass-dev \
  libavc1394-dev \
  libavresample-dev \
  libbluray-dev \
  libbs2b-dev \
  libcaca-dev \
  libcdio-dev \
  libcelt-dev \
  libchromaprint-dev \
  libdrm-dev \
  libfdk-aac-dev \
  flite1-dev \
  libfontconfig1-dev \
  libfreetype6-dev \
  libfrei0r-ocaml-dev \
  libfribidi-dev \
  libgme-dev \
  libgsm1-dev \
  libiec61883-dev \
  libjack-dev \
  libkvazaar-dev \
  libladspa-ocaml-dev \
  libmodplug-dev \
  libmp3lame-dev \
  libmp3lame-dev \
  libopencore-amrnb-dev \
  libopencore-amrwb-dev \
  libopencv-dev \
  libopenh264-dev \
  libopenjpeg-dev \
  libopenmpt-dev \
  libopus-dev \
  libopus-dev \
  libpulse-dev \
  librsvg2-dev \
  librtmp-dev \
  librubberband-dev \
  libsdl2-dev \
  libshine-dev \
  libsmbclient-dev \
  libsnappy-dev \
  libsoxr-dev \
  libspeex-dev \
  libssh-dev \
  libtesseract-dev \
  libtheora-dev \
  libtheora-dev \
  libtool \
  libtwolame-dev \
  libv4l-dev \
  libva-dev \
  libvdpau-dev \
  libvidstab-dev \
  libvo-amrwbenc-dev \
  libvorbis-dev \
  libvorbis-dev \
  libvpx-dev \
  libvpx-dev \
  libwavpack-dev \
  libwebp-dev \
  libx264-dev \
  libx264-dev \
  libx265-dev \
  libx265-dev \
  libxcb1-dev \
  libxcb-shape0-dev \
  libxcb-shm0-dev \
  libxcb-xfixes0-dev \
  libxml2-dev \
  libxvidcore-dev \
  libzimg-dev \
  libzmq-dev \
  libzvbi-dev \
  libopenal-dev \
  libssl1.0-dev \
  zlib1g-dev

cd ~/ffmpeg_sources
wget http://ffmpeg.org/releases/ffmpeg-snapshot.tar.bz2 -O ffmpeg-snapshot.tar.bz2
tar xjvf ffmpeg-snapshot.tar.bz2
cd ffmpeg

echo "Configuring FFmpeg"
PATH="$HOME/bin:$PATH" PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" ./configure \
  --prefix="$HOME/ffmpeg_build" \
  --pkg-config-flags="--static" \
  --extra-cflags="-I$HOME/ffmpeg_build/include" \
  --extra-ldflags="-L$HOME/ffmpeg_build/lib" \
  --extra-libs="-lpthread -lm" \
  --bindir="$HOME/bin" \
  --enable-gpl \
  --enable-nonfree \
  --enable-version3 \
  --enable-avresample \
  --enable-omx \
  --enable-omx-rpi \
  --enable-mmal \
  --enable-avisynth \
  --enable-chromaprint \
  --enable-frei0r \
  --enable-ladspa \
  --enable-libass \
  --enable-libbluray \
  --enable-libbs2b \
  --enable-libcaca \
  --enable-libcelt \
  --enable-libcdio \
  --enable-libdc1394 \
  --enable-libfdk-aac \
  --enable-libflite \
  --enable-libfontconfig \
  --enable-libfreetype \
  --enable-libfribidi \
  --enable-libgme \
  --enable-libgsm \
  --enable-libiec61883 \
  --enable-libjack \
  --enable-libkvazaar \
  --enable-libmodplug \
  --enable-libmp3lame \
  --enable-libopencore-amrnb \
  --enable-libopencore-amrwb \
  --enable-libopencv \
  --enable-libopenh264 \
  --enable-libopenjpeg \
  --enable-libopenmpt \
  --enable-libopus \
  --enable-libpulse \
  --enable-librsvg \
  --enable-librubberband \
  --enable-librtmp \
  --enable-libshine \
  --enable-libsmbclient \
  --enable-libsnappy \
  --enable-libsoxr \
  --enable-libspeex \
  --enable-libssh \
  --enable-libtesseract \
  --enable-libtheora \
  --enable-libtwolame \
  --enable-libv4l2 \
  --enable-libvidstab \
  --enable-libvmaf \
  --enable-libvo-amrwbenc \
  --enable-libvorbis \
  --enable-libvpx \
  --enable-libwavpack \
  --enable-libwebp \
  --enable-libx264 \
  --enable-libx265 \
  --enable-libxavs \
  --enable-libxcb \
  --enable-libxcb-shm \
  --enable-libxcb-xfixes \
  --enable-libxcb-shape \
  --enable-libxvid \
  --enable-libxml2 \
  --enable-libzimg \
  --enable-libzmq \
  --enable-libzvbi \
  --enable-libdrm \
  --enable-openssl \
  --enable-openal \
  --enable-opengl

echo "Making FFmpeg"
PATH="$HOME/bin:$PATH" make -j4
make install
hash -r

#Update Shared Library Cache
echo "Updating Shared Library Cache"
sudo ldconfig

echo "FFmpeg and Codec Installation Complete"
 、、、
 
 错误：
 ERROR: chromaprint not found
 
 解决办法：
  sudo aptitude install libchromaprint-dev
  
 错误：
 ERROR: frei0r.h dlfcn.h not found
 解决：
 sudo aptitude install frei0r-plugins-dev

错误:
E: Unable to locate package libfdk-aac-dev
E: Unable to locate package libkvazaar-dev
E: Unable to locate package libopenh264-dev
E: Unable to locate package libzimg-dev


$nano /etc/apt/sources.list
deb http://www.deb-multimedia.org buster main non-free
$sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 5C808C2B65558117
$ sudo apt-get update
$ sudo aptitude -y install libfdk-aac-dev libkvazaar-dev libopenh264-dev libzimg-dev 
  sudo aptitude -y install  libssl1.0-dev
  
  
